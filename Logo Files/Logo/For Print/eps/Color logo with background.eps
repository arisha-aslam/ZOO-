%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2382 822
%%HiResBoundingBox: 0 0 2382 822
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2382 822 re
W
q
[0.24 0 0 -0.24 0 822] cm
q
0 0 9924.999 3423.9216 re
W*
q
[3.124221 0 0 3.12442 0.0633217 0] cm
/DeviceRGB {} CS
[0.9686 0.9843 0.9882] SC
/DeviceRGB {} cs
[0.9686 0.9843 0.9882] sc
0 0 3176.7512 1095.85815 re
f
Q
q
[27.610508 0 0 27.612272 276.1684 276.12271] cm
q
0 0 m
103 0 l
103 104 l
0 104 l
0 0 l
h
4 4 m
4 100 l
99 100 l
99 4 l
4 4 l
h
W
[103.000002 0 0 103.999998 -0.000000337781 0.00000337429] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.588 mul 0 add
1 index 1 exp 0.404 mul 0.408 add
2 index 1 exp -0.079 mul 0.22 add
4 3 roll pop 
}
def
0 1 0 axialSH
Q
Q
q
[48.006355 0 0 48.009422 636.09253 -161.147308] cm
q
23.940001 60.84 m
11.940001 60.84 2.280001 51.66 2.280001 39.120003 c
2.280001 39.000004 l
2.280001 26.760004 11.700001 17.160004 24.42 17.160004 c
33 17.160004 38.52 20.760004 42.239998 25.920004 c
33.479996 32.700005 l
31.079996 29.700005 28.319996 27.780005 24.299995 27.780005 c
18.419994 27.780005 14.279995 32.760006 14.279995 38.880005 c
14.279995 39.000004 l
14.279995 45.300003 18.419994 50.220005 24.299995 50.220005 c
28.679996 50.220005 31.259995 48.180004 33.779995 45.120007 c
42.539993 51.360008 l
38.579994 56.820007 33.239994 60.840008 23.939993 60.840008 c
23.940001 60.84 l
h
W
[40.259996 0 0 43.680003 2.280001 17.160004] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.588 mul 0 add
1 index 1 exp 0.404 mul 0.408 add
2 index 1 exp -0.079 mul 0.22 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[27.20648 0 0 27.208216 3630.8254 611.51056] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
11.699 40.351559 m
5.800601 40.351559 1.523001 36.289059 1.523001 30.156559 c
1.523001 24.043259 5.800301 19.98056 11.699 19.98056 c
16.367001 19.98056 19.9412 22.46106 21.0154 26.83606 c
16.835701 27.38294 l
16.07398 24.88294 14.140401 23.59384 11.659901 23.59384 c
8.378601 23.59384 6.0154 26.19154 6.0154 30.15634 c
6.0154 34.12114 8.3787 36.718842 11.659901 36.718842 c
14.140401 36.718842 16.074001 35.449341 16.835701 32.949341 c
21.0154 33.476681 l
19.9412 37.851681 16.288799 40.351681 11.699 40.351681 c
11.699 40.351559 l
h
43.359749 29.844 m
43.301155 30.976799 l
28.360155 30.976799 l
28.535934 34.883099 31.055454 36.758099 34.043755 36.758099 c
36.231255 36.758099 38.008556 35.644798 38.907055 33.672199 c
43.008656 34.375328 l
41.641457 38.164429 38.243057 40.371429 34.082855 40.371429 c
28.047655 40.371429 23.945854 36.621429 23.945854 30.17643 c
23.945854 23.73143 28.145054 19.96143 33.945854 19.96143 c
39.356056 19.96143 43.340355 23.12553 43.359955 29.844231 c
43.359749 29.844 l
h
33.964748 23.301001 m
31.210848 23.301001 29.179548 24.629101 28.554548 27.617401 c
38.847549 27.617401 l
38.495991 24.707201 36.562347 23.301001 33.964748 23.301001 c
h
58.593937 19.98 m
62.988438 19.98 65.664238 22.401899 65.664238 26.776899 c
65.664238 39.999901 l
61.132938 39.999901 l
61.132938 27.753901 l
61.132938 24.785101 59.336037 23.6523 57.265739 23.6523 c
54.78524 23.6523 52.656342 25.058599 52.636841 28.710899 c
52.636841 39.999901 l
48.144642 39.999901 l
48.144642 20.3519 l
52.636841 20.3519 l
52.636841 22.6761 l
53.945442 20.9769 56.03524 19.980801 58.593842 19.980801 c
58.593937 19.98 l
h
78.437531 40 m
74.921928 40 72.812531 37.929699 72.812531 34.257801 c
72.812531 23.866802 l
68.886734 23.866802 l
68.886734 20.351202 l
70.234436 20.351202 l
72.304733 20.351202 73.261734 19.530891 73.261734 16.972301 c
73.261734 13.925402 l
77.363335 13.925402 l
77.363335 20.351202 l
81.640633 20.351202 l
81.640633 23.866802 l
77.363335 23.866802 l
77.363335 33.788704 l
77.363335 35.624603 78.359428 36.523106 79.863335 36.523106 c
81.640633 36.523106 l
81.640633 39.999706 l
78.437531 39.999706 l
78.437531 40 l
h
90.605438 23.652 m
91.562469 21.6989 94.082039 20.155901 96.93354 20.1364 c
96.93354 24.238001 l
92.929642 24.238001 90.781242 25.702801 90.781242 29.980202 c
90.781242 40.000202 l
86.269539 40.000202 l
86.269539 20.352201 l
90.605438 20.352201 l
90.605438 23.653002 l
90.605438 23.652 l
h
105.195313 40.37109 m
102.011711 40.37109 99.14061 38.847691 99.14061 35.019489 c
99.14061 30.82029 102.558609 29.511688 106.66011 28.769489 c
109.628914 28.222609 l
110.918015 27.968699 111.445313 27.382769 111.445313 26.445309 c
111.445313 24.023409 109.550812 23.222609 107.59761 23.222609 c
105.468712 23.222609 103.730408 24.160109 103.437408 26.679609 c
99.394409 25.93742 l
100.078003 21.87492 103.007706 19.99992 107.87101 19.99992 c
111.796806 19.99992 115.761612 21.406219 115.761612 26.933519 c
115.761612 34.55072 l
115.761612 36.406219 116.249893 36.933521 117.617111 36.933521 c
117.929611 36.933521 l
117.929611 39.99992 l
115.800713 39.99992 l
113.593712 39.99992 112.265511 39.21867 111.816315 37.402222 c
111.601471 37.402222 l
110.078072 39.550621 107.558472 40.371021 105.195168 40.371021 c
105.195313 40.37109 l
h
106.250015 36.835899 m
109.335915 36.835899 111.738312 34.550697 111.738312 30.956999 c
106.718811 32.070297 l
104.648514 32.460926 103.496109 33.164097 103.496109 34.648396 c
103.496109 36.191395 104.707008 36.835896 106.250008 36.835896 c
106.250015 36.835899 l
h
122.285164 40 m
122.285164 10 l
126.816467 10 l
126.816467 40 l
122.285164 40 l
h
157.324631 20.351999 m
147.812927 36.465 l
157.187927 36.465 l
157.187927 40.000198 l
141.269928 40.000198 l
150.723022 23.906199 l
141.914429 23.906199 l
141.914429 20.351498 l
157.324432 20.351498 l
157.324631 20.351999 l
h
170.3325 40.37109 m
164.395004 40.37109 160.000504 36.523392 160.000504 30.15609 c
160.000504 23.84749 164.356003 19.980091 170.3325 19.980091 c
176.3286 19.980091 180.68451 23.84729 180.68451 30.15609 c
180.68451 36.523289 176.30951 40.37109 170.3325 40.37109 c
h
170.2925 36.7383 m
173.71049 36.7383 176.21049 34.140602 176.21049 30.1563 c
176.21049 26.1915 173.71049 23.5938 170.2925 23.5938 c
166.93309 23.5938 164.472198 26.1915 164.472198 30.1563 c
164.472198 34.140701 166.933105 36.7383 170.2925 36.7383 c
h
194.1411 40.37109 m
188.2036 40.37109 183.8091 36.523392 183.8091 30.15609 c
183.8091 23.84749 188.1646 19.980091 194.1411 19.980091 c
200.13719 19.980091 204.4931 23.84729 204.4931 30.15609 c
204.4931 36.523289 200.1181 40.37109 194.1411 40.37109 c
h
194.10109 36.7383 m
197.51909 36.7383 200.01909 34.140602 200.01909 30.1563 c
200.01909 26.1915 197.51909 23.5938 194.10109 23.5938 c
190.74168 23.5938 188.28079 26.1915 188.28079 30.1563 c
188.28079 34.140701 190.7417 36.7383 194.10109 36.7383 c
h
f
Q
q
[27.610508 0 0 27.612272 3664.53 1982.0089] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
9.64 5.6 m
12.92 18.08 l
12.96 18.08 l
16.1 5.6 l
17.5 5.6 l
13.72 20 l
12.22 20 l
8.88 7.28 l
8.84 7.28 l
5.5 20 l
4 20 l
0.28 5.6 l
1.64 5.6 l
4.74 18.08 l
4.78 18.08 l
8.12 5.6 l
9.639999 5.6 l
9.64 5.6 l
h
21.24 20 m
19.879999 20 l
19.879999 5.6 l
21.24 5.6 l
21.24 20 l
h
34.040001 20 m
24.960001 20 l
24.960001 5.6 l
26.320002 5.6 l
26.320002 18.84 l
34.040001 18.84 l
34.040001 20 l
h
41 20 m
36.080002 20 l
36.080002 5.6 l
41 5.6 l
42.599998 5.6 44.099998 5.7 45.439999 6.68 c
47.34 8.06 47.84 10.860001 47.84 12.780001 c
47.84 14.68 47.420002 16.800001 46.099998 18.240002 c
44.779999 19.720001 42.899998 20.000002 41 20.000002 c
41 20 l
h
37.439999 6.76 m
37.439999 18.84 l
40.699997 18.84 l
41.919998 18.84 42.979996 18.76 44.079998 18.18 c
46 17.200001 46.48 14.74 46.48 12.780001 c
46.48 10.68 46.02 8.380001 44 7.300001 c
43.139999 6.840001 41.900002 6.760001 40.700001 6.760001 c
37.440002 6.760001 l
37.439999 6.76 l
h
59.599998 20 m
50.519997 20 l
50.519997 5.6 l
51.879997 5.6 l
51.879997 18.84 l
59.599998 18.84 l
59.599998 20 l
h
63.48 20 m
62.119999 20 l
62.119999 5.6 l
63.48 5.6 l
63.48 20 l
h
68.419998 20 m
67.059998 20 l
67.059998 5.6 l
76.339996 5.6 l
76.339996 6.76 l
68.419998 6.76 l
68.419998 11.96 l
75.619995 11.96 l
75.619995 13.12 l
68.419998 13.12 l
68.419998 20 l
h
88.099998 20 m
78.32 20 l
78.32 5.6 l
87.900002 5.6 l
87.900002 6.76 l
79.68 6.76 l
79.68 11.96 l
87.099998 11.96 l
87.099998 13.12 l
79.68 13.12 l
79.68 18.84 l
88.099998 18.84 l
88.099998 20 l
h
107.720001 9.78 m
106.32 9.78 l
105.760002 7.32 104.239998 6.38 101.779999 6.38 c
98.299995 6.38 96.799995 9.36 96.799995 12.76 c
96.799995 15.980001 97.979996 19.220001 101.899994 19.220001 c
104.379997 19.220001 105.919991 17.540001 106.459991 15.260001 c
107.87999 15.260001 l
107.23999 18.040001 105.499992 20.380001 101.639992 20.380001 c
97.199989 20.380001 95.439995 16.880001 95.439995 12.800001 c
95.439995 7.300001 98.319992 5.220001 102.139992 5.220001 c
105.099991 5.220001 107.259995 6.800001 107.719994 9.780001 c
107.720001 9.78 l
h
109.980003 12.82 m
109.960007 8.62 112.32 5.22 116.620003 5.22 c
121.120003 5.22 123.400002 8.6 123.400002 12.82 c
123.400002 16.959999 121.120003 20.379999 116.68 20.379999 c
112.239998 20.379999 109.980003 16.959999 109.980003 12.82 c
h
116.699997 19.219999 m
120.439995 19.219999 122.039993 16.18 122.039993 12.82 c
122.039993 8.82 119.979996 6.38 116.659996 6.38 c
112.959999 6.38 111.339996 9.48 111.339996 12.82 c
111.339996 16.219999 112.939995 19.219999 116.699997 19.219999 c
h
135.740005 20 m
127.460007 7.44 l
127.420006 7.44 l
127.420006 20 l
126.060005 20 l
126.060005 5.6 l
127.600006 5.6 l
135.920013 18.18 l
135.960007 18.18 l
135.960007 5.6 l
137.320007 5.6 l
137.320007 20 l
135.740005 20 l
h
150.179993 20 m
141.899994 7.44 l
141.860001 7.44 l
141.860001 20 l
140.5 20 l
140.5 5.6 l
142.039993 5.6 l
150.359985 18.18 l
150.399979 18.18 l
150.399979 5.6 l
151.759979 5.6 l
151.759979 20 l
150.179977 20 l
150.179993 20 l
h
164.759995 20 m
154.979996 20 l
154.979996 5.6 l
164.559998 5.6 l
164.559998 6.76 l
156.339996 6.76 l
156.339996 11.96 l
163.759995 11.96 l
163.759995 13.12 l
156.339996 13.12 l
156.339996 18.84 l
164.759995 18.84 l
164.759995 20 l
h
178.82001 9.78 m
177.42001 9.78 l
176.86002 7.32 175.34001 6.38 172.88002 6.38 c
169.40002 6.38 167.90002 9.36 167.90002 12.76 c
167.90002 15.980001 169.08002 19.220001 173.00003 19.220001 c
175.48003 19.220001 177.02003 17.540001 177.56003 15.260001 c
178.98003 15.260001 l
178.34003 18.040001 176.60002 20.380001 172.74002 20.380001 c
168.30002 20.380001 166.540024 16.880001 166.540024 12.800001 c
166.540024 7.300001 169.42003 5.220001 173.24002 5.220001 c
176.20003 5.220001 178.36002 6.800001 178.82002 9.780001 c
178.82001 9.78 l
h
180.34 6.76 m
180.34 5.6 l
190.81999 5.6 l
190.81999 6.76 l
186.25999 6.76 l
186.25999 20 l
184.89999 20 l
184.89999 6.76 l
180.34 6.76 l
h
202.53999 20 m
192.75999 20 l
192.75999 5.6 l
202.34 5.6 l
202.34 6.76 l
194.12 6.76 l
194.12 11.96 l
201.53999 11.96 l
201.53999 13.12 l
194.12 13.12 l
194.12 18.84 l
202.53999 18.84 l
202.53999 20 l
h
209.89999 20 m
204.98 20 l
204.98 5.6 l
209.89999 5.6 l
211.5 5.6 213 5.7 214.34 6.68 c
216.23999 8.06 216.73999 10.860001 216.73999 12.780001 c
216.73999 14.68 216.31999 16.800001 214.99998 18.240002 c
213.67998 19.720001 211.79999 20.000002 209.89998 20.000002 c
209.89999 20 l
h
206.34 6.76 m
206.34 18.84 l
209.59999 18.84 l
210.81999 18.84 211.87999 18.76 212.98 18.18 c
214.89999 17.200001 215.37999 14.74 215.37999 12.780001 c
215.37999 10.68 214.91998 8.380001 212.89999 7.300001 c
212.03999 6.840001 210.79999 6.760001 209.59999 6.760001 c
206.34 6.760001 l
206.34 6.76 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
